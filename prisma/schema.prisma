generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id               String    @id @unique // uuid generated by the client
    firstName        String
    lastName         String
    email            String    @unique
    emailVerified    DateTime?
    password         String
    phoneNumber      String?
    address          String?
    dateOfBirth      DateTime?
    profileImage     String?
    isPayingCustomer Boolean   @default(false)
    name             String? // necessary for Next auth
    image            String? // necessary for Next auth

    // Define relationships
    vehicles    Vehicle[] // One to many, one user can have many vehicles
    inspections Inspection[] // One to many, one user can have many inspections

    // Next auth relationships
    accounts Account[]
    sessions Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id])
}

model Vehicle {
    id           String  @id @unique
    make         String
    model        String
    year         Int
    color        String?
    mileage      Int?
    vinNumber    String  @unique
    licensePlate String?
    state        String?
    description  String?

    // Define relationships
    owner       User         @relation(fields: [userId], references: [id]) // One to one, one vehicle can only have one owner
    userId      String
    inspections Inspection[] // One to many, one vehicle can have many inspections (e.g. Uber, Lyft, Bundle)
    media       Media? // One to one, one vehicle can only have one media set

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, userId])
    @@index([userId])
}

model Media {
    id Int @id @default(autoincrement())

    interior Json?
    exterior Json?
    tires    Json?
    mirrors  Json?
    videos   Json?

    // Define relationships
    vehicle   Vehicle @relation(fields: [vehicleId], references: [id]) // One to one, one media can only have one vehicle
    vehicleId String  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, vehicleId])
    @@index([vehicleId])
}

model Inspection {
    id        String   @id @unique
    type      String // Enum ('uber', 'lyft', 'bundle')
    date      DateTime
    time      String
    location  String
    inspector String
    status    String // Enum ('pass', 'fail', 'pending', 'in-progress')
    pdfCopy   String?

    // Define relationships
    vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
    vehicleId String
    user      User    @relation(fields: [userId], references: [id])
    userId    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, vehicleId, userId])
    @@index([vehicleId])
    @@index([userId])
}

// Models below are necessary for Next auth
// Account, Session, VerificationToken
model Account {
    id                String  @id @default(cuid())
    userId            String  @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
